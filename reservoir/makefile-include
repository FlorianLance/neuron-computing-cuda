
# makefile-include of swooz-viewer project using Visual C++
# Guillaume Gibert / Florian Lance
# lyon sept 2013

################################################################################################################# DEBUG/RELEASE MODE

############################ DOC CL OPTIONS

# -MTd   : Creates a debug multithreaded executable file, No need to define _DEBUG, compiler does it for us if -MTd flag is on
# -DGSL_RANGE_CHECK : tells the mat lib to do range checking
# -Zi    : Generates complete debugging information
# -nolog : In brief, the positive form suppresses the logo at startup and the negative form makes explicit that this suppression is not wanted. However, there are some other effects. 
# -O2 	 : Creates fast code
# -W3 	 : Sets warning level
# -MT 	 : Causes your application to use the multithread, static version of the run-time library. 
#     	   Defines _MT and causes the compiler to place the library name LIBCMT.lib into the .obj file 
#     	   so that the linker will use LIBCMT.lib to resolve external symbols.
# -MD 	 : Causes your application to use the multithread- and DLL-specific version of the run-time library
#     	   Defines _MT and _DLL and causes the compiler to place the library name MSVCRT.lib into the .obj file.
#    	   Applications compiled with this option are statically linked to MSVCRT.lib. 
#     	   This library provides a layer of code that allows the linker to resolve external references. 
#     	   The actual working code is contained in MSVCR100.DLL, which must be available at run time to applications linked with MSVCRT.lib.
# -GF 	 : enable string pooling
# -Gy 	 : enable function-level linking
# -EHsc  : exception model to use : /EHsc -> intercept only C++ exceptions, extern C functions never launch C++ exception.
# 	   object files go to -Fo 


############################ WIN LIB

WINLIBS=advapi32.lib comctl32.lib comdlg32.lib gdi32.lib shell32.lib user32.lib vfw32.lib winmm.lib opengl32.lib

############################ DIRECTORIES

# define lib dir

LIBDIR  =./lib
DIST_LIBDIR = $(P_DIST)lib

!if  "$(ARCH)" == "x86"
LIBDIR= $(LIBDIR)/x86
DIST_LIBDIR = $(DIST_LIBDIR)/x86
!endif

!if  "$(ARCH)" == "amd64"
LIBDIR= $(LIBDIR)/amd64
DIST_LIBDIR = $(DIST_LIBDIR)/amd64
!endif

!if  "$(CFG)" == "Release"
LIBDIR= $(LIBDIR)/Release
DIST_LIBDIR = $(DIST_LIBDIR)/Release
!endif

!if  "$(CFG)" == "Debug"
LIBDIR= $(LIBDIR)/Debug
DIST_LIBDIR = $(DIST_LIBDIR)/Debug
!endif


# others dir

BINDIR=./bin
QTGENW=./genUI
FORMDIR=./form
MOCDIR=./moc

############################ SET UP FOR THE WANTED ARCH

# We include setargv.obj for executables that do command line filename globbing.
# PROGRAMFILES is inherited from the shell evironment (where it is
# called ProgramFiles, but nmake converts it to upper case).  This allows us
# to work with systems that use \Program Files or \Program Files x86.
# we include binmode.obj so files are opened as _O_BINARY, for compat with unix

SETARGV = "$(VS100COMNTOOLS)/../../VC/lib/setargv.obj"
BINMODE = "$(VS100COMNTOOLS)/../../VC/lib/binmode.obj"

!IF "$(ARCH)" != "x86"
SETARGV = "$(VS100COMNTOOLS)/../../VC/lib/amd64/setargv.obj"
BINMODE = "$(VS100COMNTOOLS)/../../VC/lib/amd64/binmode.obj"

THIRD_PARTY_BOOST       = $(THIRD_PARTY_BOOST_64)
THIRD_PARTY_OPENCV      = $(THIRD_PARTY_OPENCV_64)
THIRD_PARTY_CULA        = $(THIRD_PARTY_CULA_64)
THIRD_PARTY_CUDA        = $(THIRD_PARTY_CUDA_64)
THIRD_PARTY_QT          = $(THIRD_PARTY_QT_64)
THIRD_PARTY_CLAPACK     = $(THIRD_PARTY_CLAPACK_64)
THIRD_PARTY_PYTHON     = $(THIRD_PARTY_PYTHON_64)

!ENDIF

############################ INCLUDES

INC_PYTHON = -I"$(THIRD_PARTY_PYTHON)include"\

INC_RES  = -I.\include

INC_OTHERS  = -I$(SW_DIST)\include

INC_VS      = -I"$(PROGRAMFILES)/Microsoft SDKs/Windows/v7.0A/Include"\ -I"$(VS100COMNTOOLS)/../../VC/include"\
	
INC_CULA    = -I"$(THIRD_PARTY_CULA)/include"\
    
INC_UI      = -I$(QTGENW)\

INC_MOC     = -I$(MOCDIR)\

INC_BOOST   = -I"$(THIRD_PARTY_BOOST)"\

INC_QT      = -I"$(THIRD_PARTY_QT)"/include/QtOpenGL -I"$(THIRD_PARTY_QT)"/include/QtGui -I"$(THIRD_PARTY_QT)"/include/QtCore -I"$(THIRD_PARTY_QT)"/include/Qt -I"$(THIRD_PARTY_QT)"/include\

#INC_QT      = -I"$(THIRD_PARTY_QT)"/include/QtOpenGL -I"$(THIRD_PARTY_QT)"/include/QtGui -I"$(THIRD_PARTY_QT)"/include/QtCore -I"$(THIRD_PARTY_QT)"/include/QtWidgets -I"$(THIRD_PARTY_QT)"/include\


INC_CV      = -I"$(THIRD_PARTY_OPENCV)"\modules/core/include -I"$(THIRD_PARTY_OPENCV)"\modules/imgproc/include\
                  -I"$(THIRD_PARTY_OPENCV)"\modules/objdetect/include -I"$(THIRD_PARTY_OPENCV)"\modules/features2d/include\
                  -I"$(THIRD_PARTY_OPENCV)"\modules/features2d/include -I"$(THIRD_PARTY_OPENCV)"\modules/flann/include\
                  -I"$(THIRD_PARTY_OPENCV)"\modules/highgui/include -I"$(THIRD_PARTY_OPENCV)"\modules/video/include\

INC_EIGEN = -I"$(THIRD_PARTY_EIGEN)"\

INC_ARMADILLO = -I"$(THIRD_PARTY_ARMADILLO)"\

############################ DEPENDENCIES

COMMON        = $(INC_RES) $(INC_OTHERS) $(INC_VS)

RESERVOIR_INC = $(COMMON) $(INC_UI) $(INC_MOC) $(INC_CV) $(INC_CULA) $(INC_QT)

#$(INC_EIGEN) $(INC_ARMADILLO) $(INC_BOOST)

GPU_INC       = $(COMMON) $(INC_CV)
# $(INC_BOOST)  $(INC_EIGEN) $(INC_PYTHON)

############################ COMMON DEBUG/RELEASE LIBS

LIBS_COMMON	=

################################################################################################################# RELEASE MODE

!IF  "$(CFG)" == "Release"

############################ FLAGS

CFLAGS_STA = -nologo -Ox -GF -Gy -W3 -MT -EHsc -DWIN32 -MP$(NUMBER_OF_PROCESSORS) -openmp #-DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -DQT_WIDGET_LIB
CFLAGS_DYN = -nologo -Ox -GF -Gy -W3 -MD -EHsc -DWIN32 -MP$(NUMBER_OF_PROCESSORS) -openmp #-DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -DQT_WIDGET_LIB
#CFLAGS_STA = -nologo -Ox -GF -Gy -W3 -MT -EHsc -DWIN32 -MP$(NUMBER_OF_PROCESSORS)
#CFLAGS_DYN = -nologo -Ox -GF -Gy -W3 -MD -EHsc -DWIN32 -MP$(NUMBER_OF_PROCESSORS)


LFLAGS_RESERVOIR =-nologo
#-nodefaultlib:LIBCMT

#
COMMON_CUDA_FLAGS  = "-O3" -DUNIX --use_fast_math
CFLAGS_CUDA_EMICP  = $(INC_RES) $(INC_CUDA) $(COMMON_CUDA_FLAGS) -odir="./lib"
CFLAGS_CUDA_GPUMAT = $(INC_RES) $(INC_CUDA) $(INC_CULA) $(COMMON_CUDA_FLAGS) -odir="./lib"


############################ LIBS


LIBS_QT 	= $(THIRD_PARTY_QT)/lib/QtOpenGL4.lib $(THIRD_PARTY_QT)/lib/QtCore4.lib $(THIRD_PARTY_QT)/lib/QtGui4.lib $(THIRD_PARTY_QT)/lib/qtmain.lib\

#LIBS_QT 	= $(THIRD_PARTY_QT)/lib/Qt5OpenGL.lib $(THIRD_PARTY_QT)/lib/Qt5Core.lib $(THIRD_PARTY_QT)/lib/Qt5Gui.lib $(THIRD_PARTY_QT)/lib/qtmain.lib\

LIBS_CV		= $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_highgui249.lib $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_core249.lib\
                  $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_imgproc249.lib $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_objdetect249.lib\
                  $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_video249.lib\

!IF "$(ARCH)" != "x86"

LIBS_CV         = $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_highgui248.lib $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_core248.lib\
                  $(THIRD_PARTY_OPENCV)/build/lib/Release/opencv_imgproc248.lib\

!ENDIF


LIBS_BOOST      = $(THIRD_PARTY_BOOST)/lib/boost_python-vc100-mt-1_56.lib

LIBS_CLA	= $(THIRD_PARTY_CLAPACK)/lib/lapack.lib $(THIRD_PARTY_CLAPACK)/lib/blas.lib $(THIRD_PARTY_CLAPACK)/lib/libf2c.lib\

LIBS_CUDA	= "$(THIRD_PARTY_CUDA)/cuda.lib" "$(THIRD_PARTY_CUDA)/cublas.lib" "$(THIRD_PARTY_CUDA)/cudart.lib"\

LIBS_CULA       = $(THIRD_PARTY_CULA)\lib\cula_lapack_basic.lib\

LIBS_PYTHON     = "$(THIRD_PARTY_PYTHON)lib/python27.lib"\

LIBS_RESERVOIR  = $(LIBS_QT) $(LIBS_CV) $(LIBS_CULA) $(LIBS_CUDA) $(LIBS_CLA)
#$(LIBS_BOOST) $(LIBS_PYTHON)


!ENDIF

################################################################################################################# DEBUG MODE
# TODO : complete

!IF  "$(CFG)" == "Debug"

############################ FLAGS

CFLAGS_STA = -nologo -Zi -W3 -MTd -EHsc -DWIN32
CFLAGS_DYN = -nologo -Zi -W3 -MDd -EHsc -DWIN32

LFLAGS_RESERVOIR=-nologo -nodefaultlib:LIBCMT

############################ LIBS


LIBS_RESERVOIR         =
	

!ENDIF

